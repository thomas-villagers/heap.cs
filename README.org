#+TITLE: A generic Heap Datastructure in C#

* Generic Heap 

An array based implementation of a heap.

- Insertion :: O(log n)
- Removal :: O(log n)

#+BEGIN_SRC csharp :tangle src/heap.cs 
  using System;
  using System.Collections.Generic; 

  public class Heap<T> {

    public List<T> list;  
    Func<T, T, int> compare; 

    public Heap(Func<T, T, int> compare) {
      list = new List<T>();
      this.compare = compare; 
    }

    public Heap() : this((x,y) => Comparer<T>.Default.Compare(x,y)) { }

    public int Count {
      get { return list.Count; }
    }

    public void Insert(T value) {
      int index = list.Count; 
      list.Add(value); 
      int parentIndex = ParentIndex(index); 
      while(index > 0 && compare(list[index], list[parentIndex]) < 0) {
        Swap(index, parentIndex);
        index = parentIndex; 
        parentIndex = ParentIndex(index); 
      }
    }

    public T Remove() {
      if (list.Count == 0) throw new ArgumentOutOfRangeException("Cannot remove Element from empty Heap"); 
      T value = list[0];
      list[0] = list[list.Count-1];
      list.RemoveAt(list.Count-1);  /* Removal of the last element in a List<T> is O(1) 
                                       (see http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs,cf7f4095e4de7646), 
                                       O(n) otherwise. */
      int index = 0;                    
      while(index < list.Count) {
    
        int leftChildIndex = LeftChildIndex(index);
        if (leftChildIndex >= list.Count) break; 

        int childIndex = leftChildIndex; 
        int rightChildIndex = RightChildIndex(index); 
        if (rightChildIndex < list.Count && compare(list[rightChildIndex], list[leftChildIndex]) < 0 ) {
          childIndex = rightChildIndex;
        } 
        if (compare(list[index], list[childIndex]) < 0) break; 
        Swap(index,childIndex);
        index = childIndex;
      }
      return value; 
    }

    public static int ParentIndex(int index) { return (index-1)/2; } 
    public static int LeftChildIndex(int index) { return index*2+1; } 
    public static int RightChildIndex(int index) { return index*2+2; } 

    private void Swap(int i1, int i2) {
      T temp = list[i1];
      list[i1] = list[i2];
      list[i2] = temp; 
    }
  }
#+END_SRC

* Demo 

** Simple Test

#+BEGIN_SRC csharp :tangle demo/test.cs 
using System; 

public class Test {

  public static void Main() {

    var H = new Heap<int>();
    H.Insert(7);
    H.Insert(4);
    H.Insert(6);
    H.Insert(3);
    H.Insert(2);
    H.Insert(5);
    H.Insert(1);

    while(H.Count > 0) 
      Console.WriteLine(H.Remove());
  }
}
#+END_SRC

#+BEGIN_SRC sh :results output :exports both
mcs demo/test.cs src/heap.cs
mono demo/test.exe
#+END_SRC

#+RESULTS:
: Compilation failed: 2 error(s), 0 warnings
: 1
: 2
: 3
: 4
: 5
: 6
: 7

** Reverse Order 

#+BEGIN_SRC csharp :tangle demo/testcompare.cs 
using System; 

public class TestCompare {

  public static void Main() {

    var H = new Heap<int>((x,y) => y - x);
    H.Insert(7);
    H.Insert(4);
    H.Insert(6);
    H.Insert(3);
    H.Insert(2);
    H.Insert(5);
    H.Insert(1);

    while(H.Count > 0) 
      Console.WriteLine(H.Remove());
  }
}
#+END_SRC

#+BEGIN_SRC sh :results output :exports both
mcs demo/testcompare.cs src/heap.cs
mono demo/testcompare.exe
#+END_SRC

#+RESULTS:
: 7
: 6
: 5
: 4
: 3
: 2
: 1

** Heap Sort Performance 

Sort a Million numbers

#+BEGIN_SRC csharp :tangle demo/heapsort.cs 
using System; 
using System.Collections.Generic; 
using System.Diagnostics; 

public class Heapsort {

  public static void Main() {

    int n = 1000000;
    var random = new Random();
    var L = new List<int>(n);
    Console.WriteLine("Generating {0} random elements...", n); 
    for(int i = 0; i < n; i++)
      L.Add(random.Next()); 

    var H = new Heap<int>();
    Console.WriteLine("Sorting {0} random elements...", n); 
    var sw = Stopwatch.StartNew(); 
    foreach(var i in L) 
      H.Insert(i); 
    var elapsedInsert = sw.ElapsedMilliseconds;
    while(H.Count > 0) 
      H.Remove();
    var elapsedRemove = sw.ElapsedMilliseconds;
    sw.Stop(); 
    Console.WriteLine("Insertion: {0} Removal: {1} Combined: {2}", elapsedInsert, elapsedRemove, elapsedInsert + elapsedRemove); 
  }
}
#+END_SRC

#+BEGIN_SRC sh :results verbatim :exports both
mcs demo/heapsort.cs src/heap.cs 
mono demo/heapsort.exe
#+END_SRC

#+RESULTS:
: Generating 1000000 random elements...
: Sorting 1000000 random elements...
: Insertion: 61 Removal: 773 Combined: 834

Note:  Insertion is very fast while Removal is kind of slow. 

Both operations run in O(log n) time, but Insertion is way more fast. Tests show that in practice Up Bubbling rarely exceeds a few levels, while Down Bubbling almost /always/ needs to process the whole tree height. 


* Graphviz Output 

#+BEGIN_SRC csharp :tangle src/heapextensions.cs 
using System;

public static class HeapExtensions {

  private static void PrintNode<T>(T rootValue, T childValue) {
    Console.WriteLine("  \"{0}\" -> \"{1}\"", rootValue, childValue);
  }

  private static void PrintNode<T>(T value, int empties) {
    Console.WriteLine("  empty{0} [label=\"\", style=invis];", empties);
    Console.WriteLine("  \"{0}\" -> empty{1}", value,  empties);
  }

  private static void PrintSubTree<T>(Heap<T> heap, int index, ref int empties) {

    int leftChild = Heap<T>.LeftChildIndex(index);

    if (leftChild < heap.list.Count) {
      PrintNode(heap.list[index], heap.list[leftChild]);
      PrintSubTree(heap, leftChild, ref empties);
    } else {
      Console.WriteLine("  \"{0}\" [shape=rectangle];", heap.list[index]);
      PrintNode(heap.list[index], empties++);
    }

    int rightChild = Heap<T>.RightChildIndex(index); 
    if (rightChild < heap.list.Count) {
      PrintNode(heap.list[index], heap.list[rightChild]);
      PrintSubTree(heap, rightChild, ref empties);
    } else {
      PrintNode(heap.list[index], empties++);
    }
  }
  
  public static void PrintDot<T>(this Heap<T> heap) {
    Console.WriteLine("digraph G {");
    int empties = 0;
    PrintSubTree(heap, 0, ref empties); 
    Console.WriteLine("}"); 
  }
}
#+END_SRC

Call extension method ~PrintDot~ and feed the results into [[http://www.graphviz.org/][Graphviz]]: 

#+BEGIN_SRC csharp :tangle demo/heaptree.cs
class HeapTree {
  public static void Main() {
    var H = new Heap<int>();
    H.Insert(8);
    H.Insert(5);
    H.Insert(6);
    H.Insert(2);
    H.Insert(7);
    H.Insert(1);
    H.Insert(3);
    H.Insert(4);

    H.PrintDot(); 
  }
}
#+END_SRC

#+BEGIN_SRC sh :results verbatim :wrap "SRC dot :file images/heap.png" :exports both
mcs demo/heaptree.cs src/heap.cs src/heapextensions.cs 
mono demo/heaptree.exe
#+END_SRC


#+RESULTS:
#+BEGIN_SRC dot :file images/heap.png
digraph G {
  "1" -> "4"
  "4" -> "5"
  "5" -> "8"
  "8" [shape=rectangle];
  empty0 [label="", style=invis];
  "8" -> empty0
  empty1 [label="", style=invis];
  "8" -> empty1
  empty2 [label="", style=invis];
  "5" -> empty2
  "4" -> "7"
  "7" [shape=rectangle];
  empty3 [label="", style=invis];
  "7" -> empty3
  empty4 [label="", style=invis];
  "7" -> empty4
  "1" -> "2"
  "2" -> "6"
  "6" [shape=rectangle];
  empty5 [label="", style=invis];
  "6" -> empty5
  empty6 [label="", style=invis];
  "6" -> empty6
  "2" -> "3"
  "3" [shape=rectangle];
  empty7 [label="", style=invis];
  "3" -> empty7
  empty8 [label="", style=invis];
  "3" -> empty8
}
#+END_SRC

#+RESULTS:
[[file:images/heap.png]]

* Application: Task Schedule 

#+BEGIN_SRC csharp :tangle demo/scheduler.cs
using System;
using System.Collections.Generic; 

using Task = System.Collections.Generic.KeyValuePair<int, int>; 

public class TaskScheduler {
  
  public class Machine {
    public List<Task> tasks; 
    public Machine() {  
      tasks = new List<Task>(); 
    }

    public static bool Overlaps(Task task1, Task task2) {
      if (task1.Value <= task2.Key) return false;
      if (task2.Value <= task1.Key) return false;
      return true; 
    }

    public bool Conflicts(Task task) {
      foreach(var t in tasks) {
        if (Overlaps(t, task) == true) return true; 
      }
      return false;
    }

    public void Add(Task task) {
      tasks.Add(task); 
    }
  }

  List<Machine> machines; 

  public TaskScheduler() {
    machines = new List<Machine>();
  }
  
  public void Schedule(Task task) {
    bool scheduled = false; 
    foreach(var m in machines) {
      if (!m.Conflicts(task)) {
        m.Add(task);
	scheduled = true;
	break;
      } 
    }
    if (scheduled == false) {
      var newMachine = new Machine();
      newMachine.Add(task);
      machines.Add(newMachine);
    }
  }

  public void PrintTikz() {
    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-GB"); 
    Console.WriteLine("\\begin{tikzpicture}[>=latex]");
    int y = 1;
    int maxTime = 0; 
    foreach (var machine in machines) {
      foreach(var task in machine.tasks) { 
        Console.WriteLine("  \\draw[fill=blue!40]({0},{1}) rectangle ({2},{3});",task.Key, y+0.1, task.Value, y+0.8);  
	maxTime = maxTime < task.Value ? task.Value : maxTime; 
      }
      y++; 
    }
    Console.WriteLine("  \\draw[thick,->](-0.2,0.8) -- ++(0,{0});", machines.Count+1); 
    for (int i = 0; i < machines.Count; i++) 
      Console.WriteLine("    \\draw(-0.4, {0}) node[left]{{Machine {1}}} -- ++ (0.4,0);", i+1+0.5, i+1); 

    Console.WriteLine("  \\draw[thick,->](-0.2,0.8) -- ++({0},0);", maxTime+1); 
    for (int i = 0; i < maxTime; i++) 
      Console.WriteLine("    \\draw({0}, 0.6) node[below]{{{1}}} -- ++ (0,0.4);", i+1, i+1); 

    Console.WriteLine("\\end{tikzpicture}");
  }

}
#+END_SRC

#+BEGIN_SRC csharp :tangle demo/taskschedule.cs
using System;
using System.Collections.Generic; 

using Task = System.Collections.Generic.KeyValuePair<int, int>; 

class TaskSchedule {

  public static void Main() {
    var tasks = new Heap<Task>((x,y) => x.Key - y.Key); 
    tasks.Insert(new Task(1,3));
    tasks.Insert(new Task(1,4)); 
    tasks.Insert(new Task(2,5)); 
    tasks.Insert(new Task(6,9)); 
    tasks.Insert(new Task(3,7)); 
    tasks.Insert(new Task(4,7)); 
    tasks.Insert(new Task(7,8)); 
    var scheduler = new TaskScheduler();
    while(tasks.Count > 0) {
      scheduler.Schedule(tasks.Remove()); 
    }
    scheduler.PrintTikz(); 
  }
}

#+END_SRC

#+BEGIN_SRC sh :results verbatim :wrap "SRC latex :imagemagick yes :iminoptions -density 600 :imoutoptions -geometry 400 :results raw :yexports results :fit yes :noweb yes :file images/schedule.png  :headers '(\"\\\\usepackage{tikz}\")" :exports both
mcs demo/taskschedule.cs demo/scheduler.cs src/heap.cs
mono demo/taskschedule.exe
#+END_SRC

#+RESULTS:
#+BEGIN_SRC latex :imagemagick yes :iminoptions -density 600 :imoutoptions -geometry 400 :results raw :yexports results :fit yes :noweb yes :file images/schedule.png  :headers '("\\usepackage{tikz}")
\begin{tikzpicture}[>=latex]
  \draw[fill=blue!40](1,1.1) rectangle (3,1.8);
  \draw[fill=blue!40](3,1.1) rectangle (7,1.8);
  \draw[fill=blue!40](7,1.1) rectangle (8,1.8);
  \draw[fill=blue!40](1,2.1) rectangle (4,2.8);
  \draw[fill=blue!40](4,2.1) rectangle (7,2.8);
  \draw[fill=blue!40](2,3.1) rectangle (5,3.8);
  \draw[fill=blue!40](6,3.1) rectangle (9,3.8);
  \draw[thick,->](-0.2,0.8) -- ++(0,4);
    \draw(-0.4, 1.5) node[left]{Machine 1} -- ++ (0.4,0);
    \draw(-0.4, 2.5) node[left]{Machine 2} -- ++ (0.4,0);
    \draw(-0.4, 3.5) node[left]{Machine 3} -- ++ (0.4,0);
    \draw(1, 0.6) node[below]{1} -- ++ (0,0.4);
    \draw(2, 0.6) node[below]{2} -- ++ (0,0.4);
    \draw(3, 0.6) node[below]{3} -- ++ (0,0.4);
    \draw(4, 0.6) node[below]{4} -- ++ (0,0.4);
    \draw(5, 0.6) node[below]{5} -- ++ (0,0.4);
    \draw(6, 0.6) node[below]{6} -- ++ (0,0.4);
    \draw(7, 0.6) node[below]{7} -- ++ (0,0.4);
    \draw(8, 0.6) node[below]{8} -- ++ (0,0.4);
    \draw(9, 0.6) node[below]{9} -- ++ (0,0.4);
  \draw[thick,->](-0.2,0.8) -- ++(10,0);
\end{tikzpicture}
#+END_SRC

#+RESULTS:
[[file:images/schedule.png]]


Another example: 

#+BEGIN_SRC csharp :tangle demo/taskschedule2.cs
using System;
using System.Collections.Generic; 

using Task = System.Collections.Generic.KeyValuePair<int, int>; 

class TaskSchedule {
  public static void Main() {

    int n = 16; 
    int maxStartTime = 10; 
    int maxRunningTime = 8; 

    var random = new Random(); 
    var tasks = new Heap<Task>((x,y) => x.Key - y.Key); 
    Func<int, int, Task>  MakeTask = ((t1,t2) => {int x = random.Next(t1)+1; return new Task(x, x+random.Next(t2));});

    for(int i = 0; i < n; i++)
      tasks.Insert(MakeTask(maxStartTime, maxRunningTime)); 

    var scheduler = new TaskScheduler();
    while(tasks.Count > 0) {
      scheduler.Schedule(tasks.Remove()); 
    }
    scheduler.PrintTikz(); 
  }
}
#+END_SRC

#+BEGIN_SRC sh :results verbatim :wrap "SRC latex :imagemagick yes :iminoptions -density 600 :imoutoptions -geometry 400 :results raw :yexports results :fit yes :noweb yes :file images/schedule2.png  :headers '(\"\\\\usepackage{tikz}\")" :exports both
mcs demo/taskschedule2.cs demo/scheduler.cs src/heap.cs
mono demo/taskschedule2.exe
#+END_SRC

#+RESULTS:
#+BEGIN_SRC latex :imagemagick yes :iminoptions -density 600 :imoutoptions -geometry 400 :results raw :yexports results :fit yes :noweb yes :file images/schedule2.png  :headers '("\\usepackage{tikz}")
\begin{tikzpicture}[>=latex]
  \draw[fill=blue!40](1,1.1) rectangle (5,1.8);
  \draw[fill=blue!40](5,1.1) rectangle (9,1.8);
  \draw[fill=blue!40](10,1.1) rectangle (15,1.8);
  \draw[fill=blue!40](1,2.1) rectangle (4,2.8);
  \draw[fill=blue!40](4,2.1) rectangle (5,2.8);
  \draw[fill=blue!40](5,2.1) rectangle (7,2.8);
  \draw[fill=blue!40](7,2.1) rectangle (12,2.8);
  \draw[fill=blue!40](7,2.1) rectangle (7,2.8);
  \draw[fill=blue!40](1,3.1) rectangle (8,3.8);
  \draw[fill=blue!40](8,3.1) rectangle (9,3.8);
  \draw[fill=blue!40](10,3.1) rectangle (16,3.8);
  \draw[fill=blue!40](1,4.1) rectangle (6,4.8);
  \draw[fill=blue!40](7,4.1) rectangle (13,4.8);
  \draw[fill=blue!40](2,5.1) rectangle (9,5.8);
  \draw[fill=blue!40](2,6.1) rectangle (7,6.8);
  \draw[fill=blue!40](2,7.1) rectangle (4,7.8);
  \draw[thick,->](-0.2,0.8) -- ++(0,8);
    \draw(-0.4, 1.5) node[left]{Machine 1} -- ++ (0.4,0);
    \draw(-0.4, 2.5) node[left]{Machine 2} -- ++ (0.4,0);
    \draw(-0.4, 3.5) node[left]{Machine 3} -- ++ (0.4,0);
    \draw(-0.4, 4.5) node[left]{Machine 4} -- ++ (0.4,0);
    \draw(-0.4, 5.5) node[left]{Machine 5} -- ++ (0.4,0);
    \draw(-0.4, 6.5) node[left]{Machine 6} -- ++ (0.4,0);
    \draw(-0.4, 7.5) node[left]{Machine 7} -- ++ (0.4,0);
    \draw(1, 0.6) node[below]{1} -- ++ (0,0.4);
    \draw(2, 0.6) node[below]{2} -- ++ (0,0.4);
    \draw(3, 0.6) node[below]{3} -- ++ (0,0.4);
    \draw(4, 0.6) node[below]{4} -- ++ (0,0.4);
    \draw(5, 0.6) node[below]{5} -- ++ (0,0.4);
    \draw(6, 0.6) node[below]{6} -- ++ (0,0.4);
    \draw(7, 0.6) node[below]{7} -- ++ (0,0.4);
    \draw(8, 0.6) node[below]{8} -- ++ (0,0.4);
    \draw(9, 0.6) node[below]{9} -- ++ (0,0.4);
    \draw(10, 0.6) node[below]{10} -- ++ (0,0.4);
    \draw(11, 0.6) node[below]{11} -- ++ (0,0.4);
    \draw(12, 0.6) node[below]{12} -- ++ (0,0.4);
    \draw(13, 0.6) node[below]{13} -- ++ (0,0.4);
    \draw(14, 0.6) node[below]{14} -- ++ (0,0.4);
    \draw(15, 0.6) node[below]{15} -- ++ (0,0.4);
    \draw(16, 0.6) node[below]{16} -- ++ (0,0.4);
  \draw[thick,->](-0.2,0.8) -- ++(17,0);
\end{tikzpicture}
#+END_SRC

#+RESULTS:
[[file:images/schedule2.png]]

